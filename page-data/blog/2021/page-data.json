{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2021","result":{"data":{"markdownRemark":{"excerpt":"俗话说知己知彼百战不殆，要成为一名前端大神，首先知道它是做什么的。单纯从工作角度看，无非就是写写前端样式，连接下后台 api…","html":"<p>俗话说知己知彼百战不殆，要成为一名前端大神，首先知道它是做什么的。单纯从工作角度看，无非就是写写前端样式，连接下后台 api，解析解析数据，然后显示给用户，核心逻辑是这样没错，只是这中间掺杂着无数个边边角角的问题，比如框架选择、性能优化、兼容性调整、工程化等等。不过呢，这些并不需要一次性掌握，随着一次一次完成工作任务，解决 bug，这些自然而然就学会了~</p>\n<p>在正式开始之前，咱们先把心态放平，就像玩游戏，游戏满级也不是一天两天的事，满级之后也才是一个新的开始。。。无尽的追求完美~。时间上，掌握前端工程师的基本技能大概需要 4 个月到 1 年的时间（看自己的意志力和上进心），之后就是在工作实践中不断的提升自己，时刻关注业界新闻，保持在科技的最前沿。工作是一个长期的事情，咱们静下心来慢慢学。</p>\n<hr>\n<h2 id=\"完整技能大图\" style=\"position:relative;\"><a href=\"#%E5%AE%8C%E6%95%B4%E6%8A%80%E8%83%BD%E5%A4%A7%E5%9B%BE\" aria-label=\"完整技能大图 permalink\" class=\"gatsby-remark-autolink before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>完整技能大图</h2>\n<p>先来看 github 上一大神制作的路线图：</p>\n<img src=\"http://chuantu.xyz/t6/741/1609126275x1033348159.png\" width=\"90%\">\n<p>小生不才仿照着写了一个 <a href=\"https://www.virkano.com/front-end-roadmap/#/\">前端学习路线</a> 急需你的帮助使它更加完善！！！</p>\n<hr>\n<h2 id=\"核心技能\" style=\"position:relative;\"><a href=\"#%E6%A0%B8%E5%BF%83%E6%8A%80%E8%83%BD\" aria-label=\"核心技能 permalink\" class=\"gatsby-remark-autolink before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>核心技能</h2>\n<p>好了，相信你已经开始下定决心要成为前端大神了，那咱们第一步就是把前端的核心装备拿下，它们分别是 html, css 和 JavaScript。前端的初衷是开发网页来让其他人看的，可以向全世界分享信息，直到最近几年才诞生了利用这些核心知识去开发移动 APP、小程序等多终端前端应用的工具，学好核心是前端工程师必备的素养。下边就是核心技能的简介：</p>\n<p><strong>HTML</strong> </p>\n<p>HTML 是用来编写网页代码结构的，它有一系列的标签用于显示不同的页面元素，比如用 <a> 显示一个超链接，<img/> 显示一张图片，就跟写一个 word 文档一样，只是单纯用 html 只能写内容，不能进行排版和美化样式，如果让网页变得漂亮，需要 CSS。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/learn/HTML\">学习 HTML ：指南与教程</a></p>\n<p>书籍：<a href=\"javascript:;\">Web 开发经典丛书：HTML &#x26; CSS 设计与构建网站</a></p>\n<p><strong>CSS</strong></p>\n<p>CSS 是用来美化 HTML 编写的页面的，通过一些语法选择特定的 html 标签，然后用一些属性来给它们添加样式，比如文字颜色，背景，位置，边距，定位等等，还可以添加动画效果让页面显示的栩栩如生~。重点要掌握 CSS 的盒子模型、常用的布局方式，比如 flex、grid 等。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/CSS\">CSS - 设计 web</a></p>\n<p>书籍：<a href=\"javascript:;\">CSS 权威指南（第四版）（上下册）</a></p>\n<p><strong>JavaScript</strong></p>\n<p>在写完 html、css 之后，咱们就可以写漂亮的页面了，那么接下来就是需要学习 JavaScript，让网页能和人进行互动，比如点击按钮弹出个对话框，处理用户输入的表单信息，添加一些复杂的动画，使用 ajax 加载远程数据等等。它可以直接操作 HTML 元素，给网页开发提供了无限可能~这里咱们一定要把 JavaScript 基础语法掌握扎实，可以观看我 B 站上的 JavaScript 视频：</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript\">JavaScript — 用户端动态脚本</a></p>\n<p>书籍：<a href=\"javascript:;\">JavaScript 权威指南（第 6 版）</a></p>\n<p>书籍：<a href=\"javascript:;\">Eloquent JavaScript 3rd edition (包括 HTTP)</a></p>\n<p><strong>网络基础</strong></p>\n<p>现在咱们可以做成型的网站了，那咱们该如何让全世界的人看到咱们的杰作呢？那这里网络基础就派上用场了，不需要精通，只需要掌握几个基本概念就好了。</p>\n<p><strong>域名</strong></p>\n<p>访问网站咱们都知道需要使用 url (网址)，比如 <a href=\"javascript:;\">www.baidu.com</a>，这个 baidu.com 就是域名，域名可以从域名提供商购买，比如阿里云。在购买域名之后要通过 DNS 解析服务把它对应到一台服务器的 IP 地址上。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/Common_questions/What_is_a_domain_name\">什么是域名？</a></p>\n<p><a href=\"https://www.aliyun.com/minisite/goods?userCode=idwbk8q2\">阿里云</a></p>\n<p><strong>服务器</strong></p>\n<p>服务器就是一台安装了服务器程序的电脑。用户用域名访问一个网站时，会有 DNS 解析服务把域名解析成 IP，再通过 IP 找到相应的服务器，服务器程序就把网站内容传递给用户的浏览器。咱们的网站就部署在服务器上，它也是从阿里云之类的提供商购买。</p>\n<p><a href=\"https://www.aliyun.com/minisite/goods?userCode=idwbk8q2\">阿里云</a></p>\n<p><strong>Linux</strong></p>\n<p>服务器的操作系统一般是 linux，它可以没有用户界面，可以节省很多 CPU 和内存资源，这样就要求咱们掌握一些常用命令，比如创建文件，切换目录，复制和移动文件，显示文件列表等。另外访问服务器常用的工具是 SSH 和 FTP，咱们需要通过这几个工具来从自己的电脑连接到远程的服务器，然后安装服务器程序和上传网站程序。</p>\n<p>书籍：<a href=\"javascript:;\">鸟哥的 Linux 私房菜 基础学习篇(第 4 版)</a></p>\n<p><strong>服务器程序</strong></p>\n<p>常用的服务器程序有 apache、nginx，它们都是基于 HTTP 协议的，有了服务器程序，网站文件比如 html 页面才能发送到用户的浏览器上。</p>\n<p><a href=\"https://www.nginx.cn/doc/\">Nginx 中文文档</a> 我自己使用的这个</p>\n<p><a href=\"https://httpd.apache.org/docs/2.4/zh-cn/\">apache 中文文档</a></p>\n<p><strong>HTTP 协议</strong></p>\n<p>协议好比如说医生开药方，写的龙飞凤舞，但是药房药师居然都看得懂~这个可以说他们都有固定套路来理解对方~那么在计算机领域，协议就是电脑之间用来交换数据的规则。HTTP 协议是用来在网络上交换和传输数据的，比如说咱们的网站 html、css 和 js 就是通过这个 http 协议来发送到浏览器的。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview\">HTTP 概述</a></p>\n<p><strong>进阶技能</strong></p>\n<p>上边核心技能都掌握了的话，你就已经超过一半的前端工程师了，接下来就是成长为更高级一些的前端工程师，这里的目的是除了理解一些高级的概念之外，还要提高开发效率，也就是用到所谓的框架。</p>\n<p><strong>响应式布局</strong></p>\n<p>现在手机和平板差不多要比电脑都流行了，所以一个网站要适应不同尺寸的屏幕，有这种特性的网站就叫做响应式网站。实现响应式主要就是通过 css 的 media query 针对不同的屏幕宽度，编写不同的 CSS 样式。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web_Development/%E5%93%8D%E5%BA%94%E5%BC%8F_Web_%E8%AE%BE%E8%AE%A1\">响应式 Web 设计</a></p>\n<p><strong>兼容性调整</strong></p>\n<p>网站需要在不同的操作系统和浏览器下都要保持一致。对于 CSS，可以使用 css hack 来对不同的浏览器加载不同的样式。 对于 JavaScript，则可以使用 Babel 等转化工具，把新的 JS 语法转换成旧的，或者使用 polyfill 加上浏览器不支持的语法。</p>\n<p>跨浏览器测试介绍</p>\n<p><strong>UI 框架</strong></p>\n<p>UI 框架提供了页面的基本 UI 样式和布局系统，比如按钮、对话框、轮播图，省了自己去开发，常用的有 Boostrap, Semantic UI， Tailwind CSS。</p>\n<p><a href=\"https://getbootstrap.net/\">Bootstrap</a></p>\n<p><a href=\"https://zijieke.com/semantic-ui/\">Semantic UI</a></p>\n<p><a href=\"https://www.tailwindcss.cn/\">Tailwind CSS</a></p>\n<p><strong>SEO</strong></p>\n<p>SEO 全称是 Search Engine Optimization，搜索引擎优化。咱们常见的百度、谷歌这些搜索引擎会定期爬取线上的网站内容，然后进行收录，网站内容质量优秀、结构良好、访问量大的还会排名比较靠前。为了给自己的网站增加曝光量，这就需要针对搜索引擎给咱们的网站添加一些内容，比如关键字。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/MDN/Contribute/Howto/Write_for_SEO\">如何带着 SEO 的思维将 MDN 的 Web 文档写的更符合搜索引擎展现</a></p>\n<p><a href=\"https://www.w3cschool.cn/kfm2f1/\">SEO 基础知识教程</a></p>\n<p><strong>Node.js、npm / yarn</strong></p>\n<p>因为 Node.js 的出现，JavaScript 的开发可以脱离浏览器了，这样就产生了好多借助 Node.js 来写前端代码的方式，然后用相应的打包工具去打包成浏览器可用的代码。这样的好处是，咱们可以充分利用 node.js 的包管理工具来方便开发，比如使用 npm 或者 yarn 管理项目的依赖。</p>\n<p><a href=\"http://nodejs.cn/\">Node.js</a></p>\n<p><a href=\"https://www.npmjs.cn/\">npm</a></p>\n<p><a href=\"https://yarn.bootcss.com/\">yarn</a></p>\n<p>书籍：<a href=\"javascript:;\">Node.js 实战 第 2 版</a></p>\n<p><strong>CSS 预编译</strong></p>\n<p>咱们在写 CSS 的时候可能一段代码要重复好多次，写一连串的选择器，重复的属性组合等等。这时 CSS 预编译工具就派上用场了，比如 SASS、LESS，它们支持 CSS 选择器嵌套、定义变量、Mixins、函数、继承等等。</p>\n<p><a href=\"https://sass.bootcss.com/documentation\">SASS</a></p>\n<p><a href=\"http://lesscss.cn/\">LESS</a></p>\n<p><strong>自动化工具</strong></p>\n<p>自动化工具有 grunt、gulp 等，可以监控文件变动，或者做一些自动化操作，比如编译 SASS 或 LESS 的代码为 CSS 等。</p>\n<p><a href=\"https://www.gulpjs.com.cn/\">gulp</a></p>\n<p><a href=\"https://www.gruntjs.net/\">grunt</a></p>\n<p><strong>React, Vue, Angular</strong></p>\n<p>这里就不得不提当下十分热门的前端开发框架了，React、Vue、Angular 三大件。它们都提供组件化开发的方式，这就让前端开发模式发生了巨大的变化，以往以页面为核心现在转为了以组件为核心，有了这些组件可以方便的在不页面进行复用。另外基于状态的数据管理，也让改变组件状态变得十分简单。这三个框架可以都学，但是工作中基本上只会用到一个，深入一个就可以了。至于它们的 UI 框架也可以根据工作的需要去学习比如 ant design、element UI 等。</p>\n<p><a href=\"https://zh-hans.reactjs.org/\">React</a></p>\n<p><a href=\"https://cn.vuejs.org/v2/guide/\">Vue</a></p>\n<p><a href=\"https://angular.cn/\">Angular</a></p>\n<p><a href=\"https://ant.design/\">Ant Design</a></p>\n<p><a href=\"https://element.eleme.cn/#/zh-CN\">Element UI</a></p>\n<p><strong>模块化 CSS</strong></p>\n<p>因为 React 等组件化工程的出现，CSS 分散在不同的组件中，很容易因为命名冲突而导致样式被覆盖，模块化的 CSS 开发方式通过使用 css modules， 或者 styled-components (css-in-js 方式) 工具能很好的避免这些问题，它们也提供了其它类似 SASS/LESS 的功能。</p>\n<p><a href=\"https://www.html.cn/create-react-app/docs/adding-a-css-modules-stylesheet/\">CSS Modules</a></p>\n<p><a href=\"https://styled-components.com/\">styled-components</a></p>\n<p><strong>工程化工具</strong></p>\n<p>所谓工程化的工具，也就是打包工具，前端项目的各种 JS、SASS 源代码可能分散的不同的地方，利用打包工具，比如 webpack、parcel，可以把它们打包成一个单一的 js 和 css 文件，它们支持按需打包，用到的代码才会打包到最终产品上，没用到的则不会。另外图片等静态资源也可以指定规则进行打包。</p>\n<p><a href=\"https://www.webpackjs.com/\">webpack</a></p>\n<p><a href=\"https://zh.parceljs.org/\">parcel</a></p>\n<p><strong>测试工具</strong></p>\n<p>没有人想要不健壮的代码，在改动一个地方之后引起全局崩塌~，咱们写好的组件需要进行详尽的测试才能确保不出问题，另外也方便咱们工程师节省时间，因为只要添加的新功能保证测试结果还是正常，那么就不需要再人工去测试了。常用的 UI 测试工具有 jest, enzyme 等等。</p>\n<p><a href=\"https://jestjs.io/zh-Hans/\">Jest</a></p>\n<p><a href=\"https://airbnb.io/enzyme/\">Enzyme</a></p>\n<p><a href=\"https://github.com/zhaoqize/puppeteer-api-zh_CN\">Puppeteer</a></p>\n<p><strong>高级技能</strong></p>\n<p>在把编写网页的技能掌握熟练以后，就要从多端开始拓展自己的技能了，另外还要深入已经掌握的技能。</p>\n<p><strong>TypeScript</strong></p>\n<p>TypeScript 是微软编写的一款带类型的 JavaScript 语言，它的代码可以编译成普通的 JavaScript，但是编写的时候支持强类型，并且支持完全面向对象的形式。它的好处在于带有了类型之后，代码更容易维护，适合大型项目的开发。</p>\n<p><a href=\"https://www.tslang.cn/docs/home.html\">TypeScript</a></p>\n<p><strong>移动开发</strong></p>\n<p>移动开发包括移动的页面 H5 开发、小程序和移动 APP 开发，好在这些有统一的开发平台，使用 React 或者 Vue 就可以进行一次开发，多平台使用。React 生态的有开发移动 APP 的 React Native，开发多端平台的 taro。 Vue 有多端开发的 uni-app。</p>\n<p><a href=\"https://reactnative.cn/\">React Native</a></p>\n<p><a href=\"https://nervjs.github.io/taro/docs/README\">Taro</a></p>\n<p><a href=\"https://uniapp.dcloud.io/\">Uni-App</a></p>\n<p><strong>桌面开发</strong></p>\n<p>桌面应用到现在还是有用武之地的，比如音乐软件，聊天软件，写作软件等等，这些也可以用前端技术开发，具体的工具有 eletron、proton native 等等。</p>\n<p><a href=\"https://www.electronjs.org/\">Electron</a></p>\n<p><a href=\"https://proton-native.js.org/#/\">Proton Native</a></p>\n<p><strong>静态网站生成工具</strong></p>\n<p>静态网站因为是纯 html、css 和 JavaScript 网站，所以拥有最快的速度、对 SEO 搜索引擎优化友好，最适合用于数据不常变动的展示、博客类的网站的搭建，常用的工具有 hexo, gatsby, docusaurus 等。</p>\n<p><a href=\"https://hexo.io/zh-cn/docs/\">Hexo</a></p>\n<p><a href=\"https://www.gatsbyjs.cn/\">Gatsby</a></p>\n<p><a href=\"https://docusaurus.io/docs/en/site-creation\">Docusaurus</a></p>\n<p><strong>SSR（服务端渲染）</strong></p>\n<p>如果使用 React、Vue 等前端框架开发网站，那么最终的页面源代码是没有 html 的，因为它们是用 JavaScript 去动态生成 html 代码，这样对 SEO 很不利，不过有了 serer side rendering，服务端渲染技术，就可以解决这个问题，它是把 JavaScript 生成好 HTML 之后，再把页面发送给浏览器。常用的有 react 系的 next.js，vue 系的 nuxt.js。</p>\n<p><a href=\"https://nextjs.frontendx.cn/\">Next.js</a></p>\n<p><a href=\"https://zh.nuxtjs.org/\">Nuxt.js</a></p>\n<p><strong>GraphQL</strong></p>\n<p>GraphQL 是一种查询语言，跟普通的 restful 结构不一样，它是按照类型来组织数据的，不同的类型之间也会有对应关系，就像数据一样，前端开发者根据自己的需要编写 graphql 语句来按需查询想要的数据，它的这种模式非常适合 React 这种项目结构的开发。</p>\n<p><a href=\"https://graphql.cn/\">GraphQL</a></p>\n<p><a href=\"https://apollographqlcn.github.io/react-docs-cn/index.html\">Apollo</a></p>\n<p><a href=\"https://relay.dev/\">Relay</a></p>\n<p><strong>性能优化</strong></p>\n<p>性能优化的概念比较广泛，而且根据应用的用户量、用户类别而不同。总体来说就是提高页面首次加载的时间、动画执行的效率、事件响应的效率。这些可以通过优化代码结构、文件大小、DNS 缓存、lazy loading 等来实现。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Performance\">Web 性能</a></p>\n<p>书籍：<a href=\"javascript:;\">Web 性能权威指南</a></p>\n<p><strong>安全</strong></p>\n<p>安全也是一个宽泛的概念，要了解 CORS（跨域资源共享）, XSS（跨站脚本攻击）, CSRF（跨站请求伪造） 等常见安全问题，也要了解 HTTPS 等安全协议，要尽量以周全的形式考虑，不要相信任何用户的输入，严格检查需要接收用户输入的地方。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Performance\">Web 安全</a></p>\n<p>书籍：<a href=\"javascript:;\">Web 安全测试</a></p>\n<p><strong>工作与团队技能</strong></p>\n<p>工作与团队技能是在工作中所必备的，无论是初级还是高级前端工程师，这些只要在工作遇到了，就都需要掌握。</p>\n<p><strong>Git</strong></p>\n<p>Git 是一个分布式的代码协作工具，几乎所有的公司都在用。Github 是 git 的一个远程仓库，咱们可以把代码发布到 github 上，既可以作为公开的向全世界展示自己的代码、进行合作，也可以作为私有的只限自己或者公司内部使用。</p>\n<p><a href=\"https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6\">Git</a></p>\n<p><a href=\"https://github.com/\">Github</a></p>\n<p>书籍：<a href=\"javascript:;\">精通 Git 第 2 版</a></p>\n<p><strong>Docker</strong></p>\n<p>Docker 是一种新的虚拟化技术，介于虚拟机和操作系统之间，它所用的资源少，并且能自动化管理镜像的运行环境和集群。因为前后端开发的分离的方式，大型的前端应用也会部署到 Docker 上。</p>\n<p><a href=\"http://www.docker.org.cn/\">Docker</a></p>\n<p><strong>CI</strong></p>\n<p>CI，持续集成，是一个自动化的部署过程，开发人员只需要改动代码，提交到 git 仓库，CI 系统会抓取代码进行打包部署并发布，节省了人工运维的时间。</p>\n<p><a href=\"https://jenkins.io/zh/\">Jenkins</a></p>\n<p><strong>ESLint 和 Prettier</strong></p>\n<p>代码合作经常会有风格和规范不统一的情况。ESLint 除了可以检查语法错误外，还可以定义开发规范，比如缩进字符的数量、命名方式等，而 prettier 则可以根据一些规范自动格式化代码。</p>\n<p><a href=\"https://cn.eslint.org/\">EsLint</a></p>\n<h2 id=\"最新技术\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E6%96%B0%E6%8A%80%E6%9C%AF\" aria-label=\"最新技术 permalink\" class=\"gatsby-remark-autolink before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最新技术</h2>\n<p><strong>WebAssembly</strong></p>\n<p>Web Assembly 是浏览器新支持的编程语言，用于辅助 JavaScript。确切的说，它不是一个编程语言，咱们可以用它的编译器编译其它语言，用来编写更强大的功能，它目前支持 c++和 rust</p>\n<p><a href=\"http://webassembly.org.cn/\">Web Assembly</a></p>\n<p><strong>Web Components</strong></p>\n<p>Web Components 是类似 React、Vue 开发的方式，但是是 JS 原生支持的方式，不再需要依赖额外的库。它的核心概念有 Custom elements（自定义元素），Shadow DOM（影子 DOM），HTML templates（HTML 模板）。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Web_Components\">Web Components</a></p>\n<p><strong>最佳实践</strong></p>\n<p>在前端开发过程中有一些最佳实践需要了解，比如 JavaScript 的设计模式、组件设计原则、代码结构等。</p>\n<p><a href=\"javascript:;\">JavaScript 设计模式</a></p>\n<hr>\n<h2 id=\"持续进步\" style=\"position:relative;\"><a href=\"#%E6%8C%81%E7%BB%AD%E8%BF%9B%E6%AD%A5\" aria-label=\"持续进步 permalink\" class=\"gatsby-remark-autolink before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>持续进步</h2>\n<p>在掌握了上边所有技能之后~咱们等级就算满级了，现在就是真正的开始了，要不断精进自己的技能。前端技术的发展相比其它技术要快的多，咱们要时常关注一些前端新闻还有业界大佬的博客或微博，自己主动去搜索一些新的前端库或者设计模式，然后应用到工作中去，这样才不至于落后。另外，因为好多技术都是外国人写的，所以要想得到第一手且最准确的消息，一定要把英语学好，一些包和工具的官方文档就算是靠着翻译也要把它们看懂，相信我，过不了几天，你会发现需要查的词越来越少，阅读速度也越来越快。</p>\n<h2 id=\"总结\" style=\"position:relative;\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-label=\"总结 permalink\" class=\"gatsby-remark-autolink before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>这篇文章尽可能详细的列举了前端工程师该掌握的技能，但是根据工作要求的不同，一些细节的框架可能没有提到，不过相信咱们在经过这么久的学习、打怪升级之后，那些个小框架都不在话下。有了良好的基础，以后咱们在工作中都能节节高升~走向人生巅峰！</p>","timeToRead":15,"id":"295999d9-abb5-5dec-9e31-1081494a2481","frontmatter":{"date":"December 28, 2020","title":"2021年最新前端学习路线"}}},"pageContext":{"slug":"/blog/2021"}},"staticQueryHashes":["1033876704","3435786681","550521386"]}